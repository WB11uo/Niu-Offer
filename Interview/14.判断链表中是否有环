// 判断链表中是否有环
public boolean test(Node head) {
	if (head == null) {
		return false;
	}
	Node fast = head;
	Node slow = head;
	while(fast != null) {
		if (fast.next == null) {
			return false;
		}
		fast = fast.next.next;
		slow = slow.next;
		if (fast == slow) {
			return true;
		}
	}
	return false;
}
//////////////////////////////
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
    //如果链表为空或者只有一个节点，肯定没环
        if (head==null || head.next==null){
            return false;
        }
        ListNode fast=head;//快指针
        ListNode slow=head;//慢指针
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            //相遇了，肯定有环
            if(fast==slow){
                return true;
            }
        }
        return false;
    }
}
