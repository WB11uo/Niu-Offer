class NodeManager {
 private Node root;  // 根节点
 private int currentIndex = 0; // 节点的序号，每次操作从0开始
 
 public void add(int data) {
  if ( root == null ) {
   root = new Node(data);
  } else {
   root.addNode(data);
  }
 }
 public void delNode(int data) {
  if ( root == null ) return ;
  if ( root.getData() == data ) {
   Node tmp = root;
   root = root.next;
   tmp = null;
  } else {
   root.delNode(data);
  }
 }
 
 public void print() {
  if ( root != null ) {
   System.out.print(root.getData() + " ");
   root.printNode();
   System.out.println();
  }
 }
 
 public boolean findNode(int data) {
  if ( root == null ) return false;
  if ( root.getData() == data ) {
   return true;
  } else {
   return root.findNode(data);
  }  
 }
 
 public boolean updateNode(int oldData, int newData) {
  if ( root == null ) return false;
  if ( root.getData() == oldData ) {
   root.setData(newData);
   return true;
  } else {
   return root.updateNode(oldData, newData);
  }
 }
 
 // 向索引之前插入
 public void insert(int index, int data) {
  if ( index < 0 ) return ;
  currentIndex = 0;
  if ( index == currentIndex ) {
   Node newNode = new Node(data);
   newNode.next = root;
   root = newNode;
  } else {
   root.insertNode(index, data);
  }
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 // 谁拥有数据，谁提供方法
 class Node {
  private int data;
  private Node next; // 把当前类型作为属性
  
  public Node(int data) {
   this.data = data;
  }
  
  public void setData(int data) {
   this.data = data;
  }
  
  public int getData() {
   return data;
  }
  
  // 添加节点
  public void addNode(int data) {
   if ( this.next == null ) {
    this.next = new Node(data);
   } else {
    this.next.addNode(data);
   }
  }
  
  // 删除节点
  public void delNode(int data) {
   if ( this.next != null ) {
    if ( this.next.getData() == data ) {
     Node tmp = this.next;
     this.next = this.next.next;
     tmp = null;
    } else {
     this.next.delNode(data);
    }
   }
  }
  
  // 输出所有节点
  public void printNode() {
   if ( this.next != null ) {
    System.out.print(this.next.getData() + " ");
    this.next.printNode();
   }
  }
  
  // 查找节点是否存在
  public boolean findNode(int data) {
   if ( this.next != null ) {
    if ( this.next.getData() == data ) {
     return true;
    } else {
     return this.next.findNode(data);
    }
   }
   
   return false;
  }
  
  // 修改节点
  public boolean updateNode(int oldData, int newData) {
   if ( this.next != null ) {
    if ( this.next.getData() == oldData ) {
     this.next.setData(newData);
     return true;
    } else {
     return this.next.updateNode(oldData, newData);
    }
   }
   return false;
  }
  
  // 插入节点
  public void insertNode(int index, int data) {
   currentIndex ++;
   if ( index == currentIndex ) {
    Node newNode = new Node(data);
    newNode.next = this.next;
    this.next = newNode;
   } else {
    this.next.insertNode(index, data);
   }
  }
 }
}
